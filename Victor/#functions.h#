/**********************************************
 * This header contains various function      *
 * definitions that will be used throughout   *
 * the game.                                  *
 *********************************************/
#ifndef FUNCTIONS_H
#define FUNCTIONS_H
#include "SDL/SDL.h"
#include <string>

// loadImage function will be used to load any image used for the game
SDL_Surface *loadImage( std::string fileName ){

  SDL_Surface* loaded = NULL;   // temp storage for laoded image
  SDL_Surface* optimized = NULL;
  loaded = SDL_LoadBMP( fileName.c_str() );   // load

  // verify loaded and continue
  if( loaded != NULL ){
    optimized = SDL_DisplayFormat(loaded);     // optimize
    SDL_FreeSurface( loaded );     // Free old 
  }
  return optimized;
}

// Surface Blitting Function
void blit(int x, int y, SDL_Surface* source, SDL_Surface* destination, SDL_Rect* clip = NULL){

  SDL_Rect offset;

  offset.x = x;
  offset.y = y;

  SDL_BlitSurface( source, clip, destination, &offset);

}

// Text on Surface 
SDL_Surface *drawtext(TTF_Font *fonttodraw, char fgR, char fgG, char fgB, char fgA, 
  char bgR, char bgG, char bgB, char bgA, char text[], textquality quality)
  {
    SDL_Color tmpfontcolor = {fgR,fgG,fgB,fgA};
    SDL_Color tmpfontbgcolor = {bgR, bgG, bgB, bgA};
    SDL_Surface *resulting_text;
 
    if (quality == solid) resulting_text = TTF_RenderText_Solid(fonttodraw, text, tmpfontcolor);
    else if (quality == shaded) resulting_text = TTF_RenderText_Shaded(fonttodraw, text, tmpfontcolor, tmpfontbgcolor);
    else if (quality == blended) resulting_text = TTF_RenderText_Blended(fonttodraw, text, tmpfontcolor);
 
    return resulting_text;
}

#endif
